{"ast":null,"code":"import _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nvar _jsxFileName = \"/Users/mariusgrondahl/Documents/GitHub/elbilvelger/elbilvelgeren/pages/elbil.js\";\nvar __jsx = React.createElement;\nimport React, { Component } from 'react';\nimport Navbar from \"../Components/Navbar\";\nimport CarCard from \"../Components/CarCard\";\nimport FlexWrapper from \"../Components/FlexWrapper\";\nimport styled from '@emotion/styled';\nimport elbiler from '../elbiler.json';\nimport Fade from 'react-reveal/Fade';\nimport { useQuery } from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\nimport { withApollo } from \"../lib/apollo\";\nconst Detail = styled.div`\nwidth: 100%;\ndisplay: flex;\nflex-direction: column;\nalign-self: center;  \n`;\nexport const ALL_POSTS_QUERY = gql`\n{\n    labrador {\n    article(id: 71564397) {\n      title\n      bodytextHTML\n    }\n  }\n}\n`;\n\nclass ElbilDetail extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      elbilId: \"0\"\n    };\n  }\n\n  componentDidMount() {\n    // Fetching this location: http://localhost:3000/elbil?id=1\n    let url = window.location.href; // Spltting the URL to this http://localhost:3000/elbil?id = 1 \n\n    let query = url.split(\"=\"); // Getting the id from the second part of the URL\n\n    let queryId = Number(query[1]); // Setting elbilId state to the id from Params\n\n    this.setState({\n      elbilId: queryId\n    });\n  }\n\n  render() {\n    const {\n      loading,\n      error,\n      data,\n      fetchMore,\n      networkStatus\n    } = useQuery(ALL_POSTS_QUERY, {\n      notifyOnNetworkStatusChange: true\n    }); // Filtering out all the Cars that does not match the id \n\n    const elbilDetail = elbiler.filter(elbil => elbil.id === this.state.elbilId); // Mapping the id that remains after filtering\n\n    const elBiler = elbilDetail.map(elbil => __jsx(Fade, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, __jsx(Detail, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, __jsx(CarCard, {\n      merke: elbil.modell,\n      modell: elbil.merke,\n      type: elbil.type,\n      rekkevidde: elbil.rekkevidde,\n      pris: elbil.pris,\n      bildeURL: elbil.bildeURL,\n      id: elbil.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }), __jsx(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, elbil.merke, \" \", elbil.modell, \" \", elbil.type), __jsx(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, \"Sitteplasser: \", elbil.sitteplasser), __jsx(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, \"Tester:\"), __jsx(\"a\", {\n      href: elbil.tester,\n      target: \"_blank\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, elbil.tester), _JSON$stringify({\n      data\n    }))));\n    return __jsx(FlexWrapper, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, __jsx(Navbar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }), elBiler);\n  }\n\n}\n\nexport default withApollo(ElbilDetail);","map":{"version":3,"sources":["/Users/mariusgrondahl/Documents/GitHub/elbilvelger/elbilvelgeren/pages/elbil.js"],"names":["React","Component","Navbar","CarCard","FlexWrapper","styled","elbiler","Fade","useQuery","gql","withApollo","Detail","div","ALL_POSTS_QUERY","ElbilDetail","constructor","props","state","elbilId","componentDidMount","url","window","location","href","query","split","queryId","Number","setState","render","loading","error","data","fetchMore","networkStatus","notifyOnNetworkStatusChange","elbilDetail","filter","elbil","id","elBiler","map","modell","merke","type","rekkevidde","pris","bildeURL","sitteplasser","tester"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Navbar from \"../Components/Navbar\";\nimport CarCard from \"../Components/CarCard\";\nimport FlexWrapper from \"../Components/FlexWrapper\"\nimport styled from '@emotion/styled';\n\nimport elbiler from '../elbiler.json';\nimport Fade from 'react-reveal/Fade';\n\nimport { useQuery } from '@apollo/react-hooks'\nimport gql from 'graphql-tag'\nimport { withApollo } from \"../lib/apollo\"\n\nconst Detail = styled.div`\nwidth: 100%;\ndisplay: flex;\nflex-direction: column;\nalign-self: center;  \n`\n\nexport const ALL_POSTS_QUERY = gql`\n{\n    labrador {\n    article(id: 71564397) {\n      title\n      bodytextHTML\n    }\n  }\n}\n`\n\nclass ElbilDetail extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      elbilId: \"0\"\n    };\n  }\n\n  componentDidMount() {\n    // Fetching this location: http://localhost:3000/elbil?id=1\n    let url = window.location.href\n    // Spltting the URL to this http://localhost:3000/elbil?id = 1 \n    let query = url.split(\"=\")\n    // Getting the id from the second part of the URL\n    let queryId = Number(query[1])\n    // Setting elbilId state to the id from Params\n    this.setState({elbilId: queryId});\n  }\n\n  render() {\n    const { loading, error, data, fetchMore, networkStatus } = useQuery(\n      ALL_POSTS_QUERY,\n      {\n        notifyOnNetworkStatusChange: true\n      }\n    )\n\n    // Filtering out all the Cars that does not match the id \n    const elbilDetail = elbiler.filter (elbil => elbil.id === this.state.elbilId)\n    // Mapping the id that remains after filtering\n    const elBiler = elbilDetail.map(elbil => \n      \n      <Fade>\n        <Detail>\n        <CarCard \n          merke={elbil.modell} \n          modell={elbil.merke}  \n          type={elbil.type}\n          rekkevidde={elbil.rekkevidde} \n          pris={elbil.pris} \n          bildeURL={elbil.bildeURL}\n          id={elbil.id}\n      />\n\n        <h1>{elbil.merke} {elbil.modell} {elbil.type}</h1>\n        <h3>Sitteplasser: {elbil.sitteplasser}</h3>\n\n        <h3>Tester:</h3>\n        <a href={elbil.tester} target=\"_blank\">{elbil.tester}</a>\n        {JSON.stringify({data})}\n        </Detail>\n      </Fade>\n      );\n\n    return (\n      <FlexWrapper>\n        <Navbar />\n        {elBiler}\n      \n     \n  \n      </FlexWrapper>\n    );\n  }\n}\n\nexport default withApollo(ElbilDetail);\n\n"]},"metadata":{},"sourceType":"module"}