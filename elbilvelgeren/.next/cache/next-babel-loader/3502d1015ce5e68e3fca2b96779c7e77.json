{"ast":null,"code":"import _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nvar _jsxFileName = \"/Users/mariusgrondahl/Documents/GitHub/elbilvelger/elbilvelgeren/pages/elbil.js\";\nvar __jsx = React.createElement;\nimport React, { useEffect, useState } from 'react';\nimport Navbar from \"../Components/Navbar\";\nimport CarCard from \"../Components/CarCard\";\nimport FlexWrapper from \"../Components/FlexWrapper\";\nimport styled from '@emotion/styled';\nimport elbiler from '../elbiler.json';\nimport Fade from 'react-reveal/Fade';\nimport { useQuery } from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\nimport { withApollo } from \"../lib/apollo\";\nconst Detail = styled.div`\nwidth: 100%;\ndisplay: flex;\nflex-direction: column;\nalign-self: center;  \n`;\nconst ALL_POSTS_QUERY = gql`\n{\n    labrador {\n    article(id: 71564397) {\n      title\n      bodytextHTML\n      imageId\n    }\n  }\n}\n`;\n\nElbilDetail.getInitialProps = async ({\n  req\n}) => {\n  let url = '';\n\n  if (false) {\n    url = window.location.href;\n  } else {\n    url = req.url;\n  }\n\n  let parameter = url.split(\"=\"); // Getting the id from the second part of the URL\n\n  let elbilId = Number(parameter[1]); // Returning elbilId to the id from Params\n\n  return {\n    elbilId\n  };\n};\n\nfunction ElbilDetail({\n  elbilId\n}) {\n  const {\n    loading,\n    error,\n    data,\n    fetchMore,\n    networkStatus\n  } = useQuery(ALL_POSTS_QUERY, {\n    notifyOnNetworkStatusChange: true\n  }); //Setting State\n\n  const {\n    0: elbil,\n    1: setElbil\n  } = useState([elbiler]);\n\n  const articleData = _JSON$stringify(data); // Filtering out all the Cars that does not match the id \n\n\n  const singleElbil = elbiler.filter(elbil => elbil.id === elbilId);\n  console.log(elbiler.filter(elbil => elbil.id === elbilId));\n\n  const elBiler = __jsx(Fade, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }, __jsx(Detail, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }, __jsx(CarCard, {\n    merke: singleElbil[0].modell,\n    modell: singleElbil[0].merke,\n    type: singleElbil[0].type,\n    rekkevidde: singleElbil[0].rekkevidde,\n    pris: singleElbil[0].pris,\n    bildeURL: singleElbil[0].bildeURL,\n    id: singleElbil[0].id,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }), __jsx(\"h3\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }, \"Sitteplasser: \", singleElbil[0].sitteplasser), articleData));\n\n  return __jsx(FlexWrapper, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }, __jsx(Navbar, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }), elBiler);\n}\n\nexport default withApollo(ElbilDetail);","map":{"version":3,"sources":["/Users/mariusgrondahl/Documents/GitHub/elbilvelger/elbilvelgeren/pages/elbil.js"],"names":["React","useEffect","useState","Navbar","CarCard","FlexWrapper","styled","elbiler","Fade","useQuery","gql","withApollo","Detail","div","ALL_POSTS_QUERY","ElbilDetail","getInitialProps","req","url","window","location","href","parameter","split","elbilId","Number","loading","error","data","fetchMore","networkStatus","notifyOnNetworkStatusChange","elbil","setElbil","articleData","singleElbil","filter","id","console","log","elBiler","modell","merke","type","rekkevidde","pris","bildeURL","sitteplasser"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport Navbar from \"../Components/Navbar\";\nimport CarCard from \"../Components/CarCard\";\nimport FlexWrapper from \"../Components/FlexWrapper\"\nimport styled from '@emotion/styled';\n\nimport elbiler from '../elbiler.json';\nimport Fade from 'react-reveal/Fade';\n\nimport { useQuery } from '@apollo/react-hooks'\nimport gql from 'graphql-tag'\nimport { withApollo } from \"../lib/apollo\"\n\n\n\nconst Detail = styled.div`\nwidth: 100%;\ndisplay: flex;\nflex-direction: column;\nalign-self: center;  \n`\nconst ALL_POSTS_QUERY = gql`\n{\n    labrador {\n    article(id: 71564397) {\n      title\n      bodytextHTML\n      imageId\n    }\n  }\n}\n`\nElbilDetail.getInitialProps = async ({req}) =>{\n  let url = ''\n  if (typeof window !== \"undefined\") {\n    url = window.location.href\n  } else {\n    url = req.url\n  }\n  \n  let parameter = url.split(\"=\")\n  // Getting the id from the second part of the URL\n  let elbilId = Number(parameter[1])\n  // Returning elbilId to the id from Params\n  return {elbilId};\n}\n\nfunction ElbilDetail({elbilId}) {\n  const { loading, error, data, fetchMore, networkStatus } = useQuery(\n    ALL_POSTS_QUERY,\n    {\n      notifyOnNetworkStatusChange: true\n    }\n  )\n  \n  //Setting State\n  const [elbil, setElbil] = useState([elbiler]);\n\n  \n\n  const articleData = JSON.stringify(data)\n  // Filtering out all the Cars that does not match the id \n  const singleElbil = elbiler.filter (elbil => elbil.id === elbilId)\n  console.log(elbiler.filter (elbil => elbil.id === elbilId))\n  \n  const elBiler =  \n\n    <Fade>\n      <Detail>\n      <CarCard \n        merke={singleElbil[0].modell} \n        modell={singleElbil[0].merke}  \n        type={singleElbil[0].type}\n        rekkevidde={singleElbil[0].rekkevidde} \n        pris={singleElbil[0].pris} \n        bildeURL={singleElbil[0].bildeURL}\n        id={singleElbil[0].id}\n    />\n      <h3>Sitteplasser: {singleElbil[0].sitteplasser}</h3>\n      {articleData}\n      </Detail>\n    </Fade>\n    \n\n    return (\n      <FlexWrapper>\n        <Navbar />\n        {elBiler}\n      </FlexWrapper>\n    )\n}\n\nexport default withApollo(ElbilDetail);\n\n\n\n"]},"metadata":{},"sourceType":"module"}