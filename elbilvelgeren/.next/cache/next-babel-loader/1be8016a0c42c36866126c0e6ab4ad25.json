{"ast":null,"code":"import _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nvar _jsxFileName = \"/Users/mariusgrondahl/Documents/GitHub/elbilvelger/elbilvelgeren/pages/elbil.js\";\nvar __jsx = React.createElement;\nimport React, { Component } from 'react';\nimport Navbar from \"../Components/Navbar\";\nimport CarCard from \"../Components/CarCard\";\nimport FlexWrapper from \"../Components/FlexWrapper\";\nimport styled from '@emotion/styled';\nimport elbiler from '../elbiler.json';\nimport Fade from 'react-reveal/Fade';\nimport { useQuery } from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\nimport { withApollo } from \"../lib/apollo\";\nconst Detail = styled.div`\nwidth: 100%;\ndisplay: flex;\nflex-direction: column;\nalign-self: center;  \n`;\nexport const ALL_POSTS_QUERY = gql`\n{\n    labrador {\n    article(id: 71564397) {\n      title\n      bodytextHTML\n    }\n  }\n}\n`;\n\nfunction ElbilDetail({\n  queryId\n}) {\n  const {\n    loading,\n    error,\n    data,\n    fetchMore,\n    networkStatus\n  } = useQuery(ALL_POSTS_QUERY, {\n    notifyOnNetworkStatusChange: true\n  }); // Filtering out all the Cars that does not match the id \n\n  const elbilDetail = elbiler.filter(elbil => elbil.id === this.state.elbilId); // Mapping the id that remains after filtering\n\n  const elBiler = elbilDetail.map(elbil => __jsx(Fade, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, __jsx(Detail, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, __jsx(CarCard, {\n    merke: elbil.modell,\n    modell: elbil.merke,\n    type: elbil.type,\n    rekkevidde: elbil.rekkevidde,\n    pris: elbil.pris,\n    bildeURL: elbil.bildeURL,\n    id: elbil.id,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }), __jsx(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, elbil.merke, \" \", elbil.modell, \" \", elbil.type), __jsx(\"h3\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, \"Sitteplasser: \", elbil.sitteplasser), __jsx(\"h3\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, \"Tester:\"), __jsx(\"a\", {\n    href: elbil.tester,\n    target: \"_blank\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, elbil.tester), _JSON$stringify({\n    data\n  }))));\n  return __jsx(FlexWrapper, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }, __jsx(Navbar, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }), elBiler);\n}\n\nElbilDetail.getInitialProps = async ({\n  req\n}) => {\n  let url = \"\";\n\n  if (window === \"undefined\") {\n    url = req.url;\n  } else {\n    url = window.location.href;\n  }\n\n  let query = url.split(\"=\"); // Getting the id from the second part of the URL\n\n  let queryId = Number(query[1]); // Setting elbilId state to the id from Params\n\n  return {\n    queryId\n  };\n};\n\nexport default withApollo(ElbilDetail);","map":{"version":3,"sources":["/Users/mariusgrondahl/Documents/GitHub/elbilvelger/elbilvelgeren/pages/elbil.js"],"names":["React","Component","Navbar","CarCard","FlexWrapper","styled","elbiler","Fade","useQuery","gql","withApollo","Detail","div","ALL_POSTS_QUERY","ElbilDetail","queryId","loading","error","data","fetchMore","networkStatus","notifyOnNetworkStatusChange","elbilDetail","filter","elbil","id","state","elbilId","elBiler","map","modell","merke","type","rekkevidde","pris","bildeURL","sitteplasser","tester","getInitialProps","req","url","window","location","href","query","split","Number"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Navbar from \"../Components/Navbar\";\nimport CarCard from \"../Components/CarCard\";\nimport FlexWrapper from \"../Components/FlexWrapper\"\nimport styled from '@emotion/styled';\n\nimport elbiler from '../elbiler.json';\nimport Fade from 'react-reveal/Fade';\n\nimport { useQuery } from '@apollo/react-hooks'\nimport gql from 'graphql-tag'\nimport { withApollo } from \"../lib/apollo\"\n\nconst Detail = styled.div`\nwidth: 100%;\ndisplay: flex;\nflex-direction: column;\nalign-self: center;  \n`\n\nexport const ALL_POSTS_QUERY = gql`\n{\n    labrador {\n    article(id: 71564397) {\n      title\n      bodytextHTML\n    }\n  }\n}\n`\n\nfunction ElbilDetail({queryId}) {\n  const { loading, error, data, fetchMore, networkStatus } = useQuery(\n    ALL_POSTS_QUERY,\n    {\n      notifyOnNetworkStatusChange: true\n    }\n  )\n\n  // Filtering out all the Cars that does not match the id \n  const elbilDetail = elbiler.filter (elbil => elbil.id === this.state.elbilId)\n  // Mapping the id that remains after filtering\n  const elBiler = elbilDetail.map(elbil => \n    \n    <Fade>\n      <Detail>\n      <CarCard \n        merke={elbil.modell} \n        modell={elbil.merke}  \n        type={elbil.type}\n        rekkevidde={elbil.rekkevidde} \n        pris={elbil.pris} \n        bildeURL={elbil.bildeURL}\n        id={elbil.id}\n    />\n\n      <h1>{elbil.merke} {elbil.modell} {elbil.type}</h1>\n      <h3>Sitteplasser: {elbil.sitteplasser}</h3>\n\n      <h3>Tester:</h3>\n      <a href={elbil.tester} target=\"_blank\">{elbil.tester}</a>\n      {JSON.stringify({data})}\n      </Detail>\n    </Fade>\n    );\n\n    return (\n      <FlexWrapper>\n        <Navbar />\n        {elBiler}\n      </FlexWrapper>\n    )\n\n}\n\nElbilDetail.getInitialProps = async ({req}) =>{\n  let url = \"\"\n  if (window === \"undefined\") {\n    url = req.url\n  } else {\n    url = window.location.href\n  }\n  let query = url.split(\"=\")\n  // Getting the id from the second part of the URL\n  let queryId = Number(query[1])\n  // Setting elbilId state to the id from Params\n  return {queryId};\n}\n\n\n\n\nexport default withApollo(ElbilDetail);\n\n"]},"metadata":{},"sourceType":"module"}