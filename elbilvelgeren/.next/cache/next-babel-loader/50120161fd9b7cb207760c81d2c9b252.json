{"ast":null,"code":"import _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _taggedTemplateLiteral from \"@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/mariusgrondahl/Documents/GitHub/elbilvelger/elbilvelgeren/pages/elbil.js\";\nvar __jsx = React.createElement;\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n{\\n    labrador {\\n    article(id: 71564397) {\\n      title\\n      bodytextHTML\\n      imageId\\n      intro\\n    }\\n  }\\n}\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\nwidth: 100%;\\ndisplay: flex;\\nflex-direction: column;\\nalign-self: center;  \\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useEffect } from 'react';\nimport Navbar from \"../Components/Navbar\";\nimport CarCard from \"../Components/CarCard\";\nimport FlexWrapper from \"../Components/FlexWrapper\";\nimport styled from '@emotion/styled';\nimport elbiler from '../elbiler.json';\nimport Fade from 'react-reveal/Fade';\nimport { useQuery } from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\nimport { withApollo } from \"../lib/apollo\";\nvar Detail = styled.div(_templateObject());\nvar ALL_POSTS_QUERY = gql(_templateObject2());\n\nElbilDetail.getInitialProps =\n/*#__PURE__*/\nfunction () {\n  var _ref2 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(_ref) {\n    var req, url, query, elbilId;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            req = _ref.req;\n            url = '';\n\n            if (true) {\n              url = window.location.href;\n            } else {\n              url = req.url;\n            }\n\n            query = url.split(\"=\"); // Getting the id from the second part of the URL\n\n            elbilId = Number(query[1]); // Returning elbilId to the id from Params\n\n            return _context.abrupt(\"return\", {\n              elbilId: elbilId\n            });\n\n          case 6:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nfunction ElbilDetail(_ref3) {\n  var elbilId = _ref3.elbilId;\n\n  var _useQuery = useQuery(ALL_POSTS_QUERY, {\n    notifyOnNetworkStatusChange: true\n  }),\n      loading = _useQuery.loading,\n      error = _useQuery.error,\n      data = _useQuery.data,\n      fetchMore = _useQuery.fetchMore,\n      networkStatus = _useQuery.networkStatus;\n\n  useEffect(function () {});\n\n  var articleData = _JSON$stringify(data);\n\n  console.log(articleData); // Filtering out all the Cars that does not match the id \n\n  var elbilDetail = elbiler.filter(function (elbil) {\n    return elbil.id === elbilId;\n  }); // Mapping the id that remains after filtering\n\n  var elBiler = elbilDetail.map(function (elbil) {\n    return __jsx(Fade, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, __jsx(Detail, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, __jsx(CarCard, {\n      merke: elbil.modell,\n      modell: elbil.merke,\n      type: elbil.type,\n      rekkevidde: elbil.rekkevidde,\n      pris: elbil.pris,\n      bildeURL: elbil.bildeURL,\n      id: elbil.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }), __jsx(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, \"Sitteplasser: \", elbil.sitteplasser), articleData));\n  });\n  return __jsx(FlexWrapper, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }, __jsx(Navbar, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }), elBiler);\n}\n\nexport default withApollo(ElbilDetail);","map":{"version":3,"sources":["/Users/mariusgrondahl/Documents/GitHub/elbilvelger/elbilvelgeren/pages/elbil.js"],"names":["React","useEffect","Navbar","CarCard","FlexWrapper","styled","elbiler","Fade","useQuery","gql","withApollo","Detail","div","ALL_POSTS_QUERY","ElbilDetail","getInitialProps","req","url","window","location","href","query","split","elbilId","Number","notifyOnNetworkStatusChange","loading","error","data","fetchMore","networkStatus","articleData","console","log","elbilDetail","filter","elbil","id","elBiler","map","modell","merke","type","rekkevidde","pris","bildeURL","sitteplasser"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\nimport Navbar from \"../Components/Navbar\";\nimport CarCard from \"../Components/CarCard\";\nimport FlexWrapper from \"../Components/FlexWrapper\"\nimport styled from '@emotion/styled';\n\nimport elbiler from '../elbiler.json';\nimport Fade from 'react-reveal/Fade';\n\nimport { useQuery } from '@apollo/react-hooks'\nimport gql from 'graphql-tag'\nimport { withApollo } from \"../lib/apollo\"\n\nconst Detail = styled.div`\nwidth: 100%;\ndisplay: flex;\nflex-direction: column;\nalign-self: center;  \n`\nconst ALL_POSTS_QUERY = gql`\n{\n    labrador {\n    article(id: 71564397) {\n      title\n      bodytextHTML\n      imageId\n      intro\n    }\n  }\n}\n`\nElbilDetail.getInitialProps = async ({req}) =>{\n  let url = ''\n  if (typeof window !== \"undefined\") {\n    url = window.location.href\n  } else {\n    url = req.url\n  }\n  \n  let query = url.split(\"=\")\n  // Getting the id from the second part of the URL\n  let elbilId = Number(query[1])\n  // Returning elbilId to the id from Params\n  return {elbilId};\n}\n\nfunction ElbilDetail({elbilId}) {\n  const { loading, error, data, fetchMore, networkStatus } = useQuery(\n    ALL_POSTS_QUERY,\n    {\n      notifyOnNetworkStatusChange: true\n    }\n  )\n  useEffect(() => {\n   \n  });\n\n\n  const articleData = JSON.stringify(data)\n  console.log(articleData)\n  \n  // Filtering out all the Cars that does not match the id \n  const elbilDetail = elbiler.filter (elbil => elbil.id === elbilId)\n  // Mapping the id that remains after filtering\n  const elBiler = elbilDetail.map(elbil => \n\n    <Fade>\n      <Detail>\n      <CarCard \n        merke={elbil.modell} \n        modell={elbil.merke}  \n        type={elbil.type}\n        rekkevidde={elbil.rekkevidde} \n        pris={elbil.pris} \n        bildeURL={elbil.bildeURL}\n        id={elbil.id}\n    />\n      <h3>Sitteplasser: {elbil.sitteplasser}</h3>\n      {articleData}\n      </Detail>\n    </Fade>\n    );\n\n  \n\n    return (\n      <FlexWrapper>\n        <Navbar />\n        {elBiler}\n      </FlexWrapper>\n    )\n\n}\n\nexport default withApollo(ElbilDetail);\n\n"]},"metadata":{},"sourceType":"module"}