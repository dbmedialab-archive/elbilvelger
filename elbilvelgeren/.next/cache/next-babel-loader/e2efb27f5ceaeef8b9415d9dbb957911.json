{"ast":null,"code":"import _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _taggedTemplateLiteral from \"@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/mariusgrondahl/Documents/GitHub/elbilvelger/elbilvelgeren/pages/elbil.js\";\nvar __jsx = React.createElement;\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n{\\n    labrador {\\n    article(id: 71564397) {\\n      title\\n      bodytextHTML\\n    }\\n  }\\n}\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\nwidth: 100%;\\ndisplay: flex;\\nflex-direction: column;\\nalign-self: center;  \\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { Component } from 'react';\nimport Navbar from \"../Components/Navbar\";\nimport CarCard from \"../Components/CarCard\";\nimport FlexWrapper from \"../Components/FlexWrapper\";\nimport styled from '@emotion/styled';\nimport elbiler from '../elbiler.json';\nimport Fade from 'react-reveal/Fade';\nimport { useQuery } from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\nimport { withApollo } from \"../lib/apollo\";\nvar Detail = styled.div(_templateObject());\nexport var ALL_POSTS_QUERY = gql(_templateObject2());\n\nvar ElbilDetail =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(ElbilDetail, _Component);\n\n  function ElbilDetail(props) {\n    var _this;\n\n    _classCallCheck(this, ElbilDetail);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ElbilDetail).call(this, props));\n    _this.state = {\n      elbilId: \"0\"\n    };\n    _this.componentDidMount = _this.componentDidMount.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(ElbilDetail, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      // Fetching this location: http://localhost:3000/elbil?id=1\n      var url = window.location.href; // Spltting the URL to this http://localhost:3000/elbil?id = 1 \n\n      var query = url.split(\"=\"); // Getting the id from the second part of the URL\n\n      var queryId = Number(query[1]); // Setting elbilId state to the id from Params\n\n      this.setState({\n        elbilId: queryId\n      });\n\n      var _useQuery = useQuery(ALL_POSTS_QUERY, {\n        notifyOnNetworkStatusChange: true\n      }),\n          loading = _useQuery.loading,\n          error = _useQuery.error,\n          data = _useQuery.data,\n          fetchMore = _useQuery.fetchMore,\n          networkStatus = _useQuery.networkStatus;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      // Filtering out all the Cars that does not match the id \n      var elbilDetail = elbiler.filter(function (elbil) {\n        return elbil.id === _this2.state.elbilId;\n      }); // Mapping the id that remains after filtering\n\n      var elBiler = elbilDetail.map(function (elbil) {\n        return __jsx(Fade, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 69\n          },\n          __self: this\n        }, __jsx(Detail, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 70\n          },\n          __self: this\n        }, __jsx(CarCard, {\n          merke: elbil.modell,\n          modell: elbil.merke,\n          type: elbil.type,\n          rekkevidde: elbil.rekkevidde,\n          pris: elbil.pris,\n          bildeURL: elbil.bildeURL,\n          id: elbil.id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 71\n          },\n          __self: this\n        }), __jsx(\"h1\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 81\n          },\n          __self: this\n        }, elbil.merke, \" \", elbil.modell, \" \", elbil.type), __jsx(\"h3\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 82\n          },\n          __self: this\n        }, \"Sitteplasser: \", elbil.sitteplasser), __jsx(\"h3\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 84\n          },\n          __self: this\n        }, \"Tester:\"), __jsx(\"a\", {\n          href: elbil.tester,\n          target: \"_blank\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 85\n          },\n          __self: this\n        }, elbil.tester)));\n      });\n      return __jsx(FlexWrapper, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }, __jsx(Navbar, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }), elBiler, _JSON$stringify(data));\n    }\n  }]);\n\n  return ElbilDetail;\n}(Component);\n\nexport default withApollo(ElbilDetail);","map":{"version":3,"sources":["/Users/mariusgrondahl/Documents/GitHub/elbilvelger/elbilvelgeren/pages/elbil.js"],"names":["React","Component","Navbar","CarCard","FlexWrapper","styled","elbiler","Fade","useQuery","gql","withApollo","Detail","div","ALL_POSTS_QUERY","ElbilDetail","props","state","elbilId","componentDidMount","bind","url","window","location","href","query","split","queryId","Number","setState","notifyOnNetworkStatusChange","loading","error","data","fetchMore","networkStatus","elbilDetail","filter","elbil","id","elBiler","map","modell","merke","type","rekkevidde","pris","bildeURL","sitteplasser","tester"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Navbar from \"../Components/Navbar\";\nimport CarCard from \"../Components/CarCard\";\nimport FlexWrapper from \"../Components/FlexWrapper\"\nimport styled from '@emotion/styled';\n\nimport elbiler from '../elbiler.json';\nimport Fade from 'react-reveal/Fade';\n\nimport { useQuery } from '@apollo/react-hooks'\nimport gql from 'graphql-tag'\nimport { withApollo } from \"../lib/apollo\"\n\nconst Detail = styled.div`\nwidth: 100%;\ndisplay: flex;\nflex-direction: column;\nalign-self: center;  \n`\n\nexport const ALL_POSTS_QUERY = gql`\n{\n    labrador {\n    article(id: 71564397) {\n      title\n      bodytextHTML\n    }\n  }\n}\n`\n\nclass ElbilDetail extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      elbilId: \"0\"\n    };\n    this.componentDidMount = this.componentDidMount.bind(this);\n  }\n\n  componentDidMount() {\n    // Fetching this location: http://localhost:3000/elbil?id=1\n    let url = window.location.href\n    // Spltting the URL to this http://localhost:3000/elbil?id = 1 \n    let query = url.split(\"=\")\n    // Getting the id from the second part of the URL\n    let queryId = Number(query[1])\n    // Setting elbilId state to the id from Params\n    this.setState({elbilId: queryId});\n    \n    const { loading, error, data, fetchMore, networkStatus } = useQuery(\n      ALL_POSTS_QUERY,\n      {\n        notifyOnNetworkStatusChange: true\n      }\n    )\n\n  }\n\n  \n\n  render() {\n\n    // Filtering out all the Cars that does not match the id \n    const elbilDetail = elbiler.filter (elbil => elbil.id === this.state.elbilId)\n    // Mapping the id that remains after filtering\n    const elBiler = elbilDetail.map(elbil => \n      \n      <Fade>\n        <Detail>\n        <CarCard \n          merke={elbil.modell} \n          modell={elbil.merke}  \n          type={elbil.type}\n          rekkevidde={elbil.rekkevidde} \n          pris={elbil.pris} \n          bildeURL={elbil.bildeURL}\n          id={elbil.id}\n      />\n\n        <h1>{elbil.merke} {elbil.modell} {elbil.type}</h1>\n        <h3>Sitteplasser: {elbil.sitteplasser}</h3>\n\n        <h3>Tester:</h3>\n        <a href={elbil.tester} target=\"_blank\">{elbil.tester}</a>\n        </Detail>\n      </Fade>\n      );\n\n    return (\n      <FlexWrapper>\n        <Navbar />\n        {elBiler}\n      \n      {JSON.stringify(data)}\n  \n      </FlexWrapper>\n    );\n  }\n}\n\nexport default withApollo(ElbilDetail);\n\n"]},"metadata":{},"sourceType":"module"}