{"ast":null,"code":"import _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nvar _jsxFileName = \"/Users/mariusgrondahl/Documents/GitHub/elbilvelger/elbilvelgeren/pages/elbil.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport Navbar from \"../Components/Navbar\";\nimport CarCard from \"../Components/CarCard\";\nimport FlexWrapper from \"../Components/FlexWrapper\";\nimport styled from '@emotion/styled';\nimport elbiler from '../elbiler.json';\nimport Fade from 'react-reveal/Fade';\nimport { useQuery } from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\nimport { withApollo } from \"../lib/apollo\";\nconst Detail = styled.div`\nwidth: 100%;\ndisplay: flex;\nflex-direction: column;\nalign-self: center;  \n`;\nconst ALL_POSTS_QUERY = gql`\nquery MyBodyText($id: Int) {\n  labrador {\n    article(id: $id) {\n      title\n      subtitle\n      publishedURL\n      sectionTag\n      tags\n      siteDomain\n      imageId\n      bodytextStructured {\n        __typename\n        ... on Labrador_HTMLElement {\n          name\n          attributes {\n            key\n            value\n          }\n          children {\n            __typename\n            ... on Labrador_HTMLElement {\n              name\n              attributes {\n                key\n                value\n              }\n              children {\n                __typename\n                ... on Labrador_HTMLElement {\n                  name\n                  attributes {\n                    key\n                    value\n                  }\n                  children {\n                    __typename\n                    ... on Labrador_HTMLElement {\n                      name\n                      attributes {\n                        key\n                        value\n                      }\n                      children {\n                        __typename\n                        ... on Labrador_HTMLElement {\n                          name\n                          attributes {\n                            key\n                            value\n                          }\n                          children {\n                            __typename\n                          }\n                        }\n                        ... on Labrador_Text {\n                          text\n                        }\n                      }\n                    }\n                    ... on Labrador_Text {\n                      text\n                    }\n                  }\n                }\n                ... on Labrador_Text {\n                  text\n                }\n              }\n            }\n            ... on Labrador_Text {\n              text\n            }\n          }\n        }\n      }\n    }\n  }\n}\n`;\n\nElbilDetail.getInitialProps = async ({\n  req,\n  query\n}) => {\n  let elbilId = Number(query.id);\n  return {\n    elbilId\n  };\n};\n\nfunction ElbilDetail({\n  elbilId\n}) {\n  const articleID = elbiler[elbilId].tester[0];\n  console.log(articleID);\n  const {\n    loading,\n    error,\n    data,\n    fetchMore,\n    networkStatus\n  } = useQuery(ALL_POSTS_QUERY, {\n    notifyOnNetworkStatusChange: true,\n    variables: {\n      id: articleID\n    }\n  });\n\n  if (error) {\n    console.log(\"Vi har en feil\");\n    return null;\n  } // Using State Hook\n\n\n  const {\n    0: articleTitle,\n    1: setTitle\n  } = useState(0);\n  const {\n    0: articleText,\n    1: setText\n  } = useState(1);\n  console.log(_JSON$stringify(data.labrador));\n  useEffect(() => {\n    // Update the document title using the browser API\n    if (data.labrador === undefined) {\n      setTitle(\"Vi finner ingen ting\");\n      setText(\"Vi finner ingen ting\");\n    } else {\n      setTitle(_JSON$stringify(data.labrador.article.title));\n      setText(_JSON$stringify(data.labrador.article.bodytextHTML));\n    }\n  }); // Filtering out the car that matches the elbilId\n\n  const singleElbil = elbiler.filter(elbil => elbil.id === elbilId);\n\n  const elBiler = __jsx(Fade, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145\n    },\n    __self: this\n  }, __jsx(Detail, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146\n    },\n    __self: this\n  }, __jsx(CarCard, {\n    merke: singleElbil[0].modell,\n    modell: singleElbil[0].merke,\n    type: singleElbil[0].type,\n    rekkevidde: singleElbil[0].rekkevidde,\n    pris: singleElbil[0].pris,\n    bildeURL: singleElbil[0].bildeURL,\n    id: singleElbil[0].id,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147\n    },\n    __self: this\n  }), __jsx(\"h3\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157\n    },\n    __self: this\n  }, \"Sitteplasser: \", singleElbil[0].sitteplasser)));\n\n  return __jsx(FlexWrapper, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164\n    },\n    __self: this\n  }, __jsx(Navbar, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165\n    },\n    __self: this\n  }), elBiler, // Cheks if data is there\n  articleTitle !== \"undefined\" ? __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169\n    },\n    __self: this\n  }, \" \", articleTitle, \" \", articleText) : __jsx(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171\n    },\n    __self: this\n  }, \" Vi har en feil\"));\n}\n\nexport default withApollo(ElbilDetail);","map":{"version":3,"sources":["/Users/mariusgrondahl/Documents/GitHub/elbilvelger/elbilvelgeren/pages/elbil.js"],"names":["React","useState","useEffect","Navbar","CarCard","FlexWrapper","styled","elbiler","Fade","useQuery","gql","withApollo","Detail","div","ALL_POSTS_QUERY","ElbilDetail","getInitialProps","req","query","elbilId","Number","id","articleID","tester","console","log","loading","error","data","fetchMore","networkStatus","notifyOnNetworkStatusChange","variables","articleTitle","setTitle","articleText","setText","labrador","undefined","article","title","bodytextHTML","singleElbil","filter","elbil","elBiler","modell","merke","type","rekkevidde","pris","bildeURL","sitteplasser"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Navbar from \"../Components/Navbar\";\nimport CarCard from \"../Components/CarCard\";\nimport FlexWrapper from \"../Components/FlexWrapper\"\nimport styled from '@emotion/styled';\n\nimport elbiler from '../elbiler.json';\nimport Fade from 'react-reveal/Fade';\n\nimport { useQuery } from '@apollo/react-hooks'\nimport gql from 'graphql-tag'\nimport { withApollo } from \"../lib/apollo\"\n\nconst Detail = styled.div`\nwidth: 100%;\ndisplay: flex;\nflex-direction: column;\nalign-self: center;  \n`\n\nconst ALL_POSTS_QUERY = gql`\nquery MyBodyText($id: Int) {\n  labrador {\n    article(id: $id) {\n      title\n      subtitle\n      publishedURL\n      sectionTag\n      tags\n      siteDomain\n      imageId\n      bodytextStructured {\n        __typename\n        ... on Labrador_HTMLElement {\n          name\n          attributes {\n            key\n            value\n          }\n          children {\n            __typename\n            ... on Labrador_HTMLElement {\n              name\n              attributes {\n                key\n                value\n              }\n              children {\n                __typename\n                ... on Labrador_HTMLElement {\n                  name\n                  attributes {\n                    key\n                    value\n                  }\n                  children {\n                    __typename\n                    ... on Labrador_HTMLElement {\n                      name\n                      attributes {\n                        key\n                        value\n                      }\n                      children {\n                        __typename\n                        ... on Labrador_HTMLElement {\n                          name\n                          attributes {\n                            key\n                            value\n                          }\n                          children {\n                            __typename\n                          }\n                        }\n                        ... on Labrador_Text {\n                          text\n                        }\n                      }\n                    }\n                    ... on Labrador_Text {\n                      text\n                    }\n                  }\n                }\n                ... on Labrador_Text {\n                  text\n                }\n              }\n            }\n            ... on Labrador_Text {\n              text\n            }\n          }\n        }\n      }\n    }\n  }\n}\n`\n\nElbilDetail.getInitialProps = async ({req, query}) =>{\n  let elbilId = Number(query.id)\n  return {elbilId};\n}\n\nfunction ElbilDetail({elbilId}) {\n  const articleID = elbiler[elbilId].tester[0]\n  console.log(articleID)\n  const { loading, error, data, fetchMore, networkStatus } = useQuery(\n    ALL_POSTS_QUERY,\n    {\n      notifyOnNetworkStatusChange: true,\n      variables: {id: articleID}\n    }\n  )\n\n  if (error) {\n    console.log(\"Vi har en feil\")\n    return null\n  }\n\n  // Using State Hook\n  const [articleTitle, setTitle] = useState(0);\n  const [articleText, setText] = useState(1);\n\n  console.log(JSON.stringify(data.labrador))\n  useEffect(() => {\n    // Update the document title using the browser API\n    if (data.labrador === undefined) {\n      setTitle(\"Vi finner ingen ting\")\n      setText(\"Vi finner ingen ting\")\n    } else {\n      setTitle(JSON.stringify(data.labrador.article.title))\n      setText(JSON.stringify(data.labrador.article.bodytextHTML))\n    }\n\n  });\n\n \n\n  // Filtering out the car that matches the elbilId\n  const singleElbil = elbiler.filter (elbil => elbil.id === elbilId)  \n  const elBiler =  \n    <Fade>\n      <Detail>\n      <CarCard \n        merke={singleElbil[0].modell} \n        modell={singleElbil[0].merke}  \n        type={singleElbil[0].type}\n        rekkevidde={singleElbil[0].rekkevidde} \n        pris={singleElbil[0].pris} \n        bildeURL={singleElbil[0].bildeURL}\n        id={singleElbil[0].id}\n    />\n      \n      <h3>Sitteplasser: {singleElbil[0].sitteplasser}</h3>\n    \n      </Detail>\n    </Fade>\n    \n\n    return (\n      <FlexWrapper>\n        <Navbar />\n        {elBiler}\n        { // Cheks if data is there\n        (articleTitle !== \"undefined\")\n          ? <div> {articleTitle} {articleText}</div> \n        \n          : <h1> Vi har en feil</h1> \n        }\n         \n        \n       \n      </FlexWrapper>\n    )\n}\n\nexport default withApollo(ElbilDetail);\n\n\n\n"]},"metadata":{},"sourceType":"module"}