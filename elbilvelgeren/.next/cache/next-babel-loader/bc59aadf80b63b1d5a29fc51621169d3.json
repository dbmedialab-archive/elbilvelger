{"ast":null,"code":"import _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nvar _jsxFileName = \"/Users/mariusgrondahl/Documents/GitHub/elbilvelger/elbilvelgeren/pages/elbil.js\";\nvar __jsx = React.createElement;\nimport React, { useEffect } from 'react';\nimport Navbar from \"../Components/Navbar\";\nimport CarCard from \"../Components/CarCard\";\nimport FlexWrapper from \"../Components/FlexWrapper\";\nimport styled from '@emotion/styled';\nimport { useRouter } from 'next/router';\nimport elbiler from '../elbiler.json';\nimport Fade from 'react-reveal/Fade';\nimport { useQuery } from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\nimport { withApollo } from \"../lib/apollo\";\nconst Detail = styled.div`\nwidth: 100%;\ndisplay: flex;\nflex-direction: column;\nalign-self: center;  \n`;\nconst ALL_POSTS_QUERY = gql`\n{\n    labrador {\n    article(id: 71564397) {\n      title\n      bodytextHTML\n      imageId\n    }\n  }\n}\n`;\n\nElbilDetail.getInitialProps = async ({\n  req\n}) => {\n  let url = '';\n\n  if (false) {\n    url = window.location.href;\n  } else {\n    url = req.url;\n  }\n\n  let parameter = url.split(\"=\"); // Getting the id from the second part of the URL\n\n  let elbilId = Number(parameter[1]); // Returning elbilId to the id from Params\n\n  return {\n    elbilId\n  };\n};\n\nfunction ElbilDetail() {\n  const {\n    loading,\n    error,\n    data,\n    fetchMore,\n    networkStatus\n  } = useQuery(ALL_POSTS_QUERY, {\n    notifyOnNetworkStatusChange: true\n  });\n  useEffect(() => {});\n\n  const articleData = _JSON$stringify(data);\n\n  function isIndex(elbil) {\n    // Getting ID from Router\n    const router = useRouter();\n    let queryId = router.query.id;\n    return elbil === queryId;\n  } // Filtering out all the Cars that does not match the id \n\n\n  const elbilDetail = elbiler.find(function elbil() {\n    if (elbil.id === queryId) {\n      return elbil;\n    } else {\n      console.log(error);\n    }\n  });\n  console.log(elbilDetail);\n  console.log(queryId); // Mapping the id that remains after filtering\n\n  const elBil = elbilDetail.map(elbil => __jsx(Fade, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }, __jsx(Detail, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }, __jsx(CarCard, {\n    merke: elbil.modell,\n    modell: elbil.merke,\n    type: elbil.type,\n    rekkevidde: elbil.rekkevidde,\n    pris: elbil.pris,\n    bildeURL: elbil.bildeURL,\n    id: elbil.id,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }), __jsx(\"h3\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  }, \"Sitteplasser: \", elbil.sitteplasser), articleData)));\n  return __jsx(FlexWrapper, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104\n    },\n    __self: this\n  }, __jsx(Navbar, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105\n    },\n    __self: this\n  }), elBil);\n}\n\nexport default withApollo(ElbilDetail);","map":{"version":3,"sources":["/Users/mariusgrondahl/Documents/GitHub/elbilvelger/elbilvelgeren/pages/elbil.js"],"names":["React","useEffect","Navbar","CarCard","FlexWrapper","styled","useRouter","elbiler","Fade","useQuery","gql","withApollo","Detail","div","ALL_POSTS_QUERY","ElbilDetail","getInitialProps","req","url","window","location","href","parameter","split","elbilId","Number","loading","error","data","fetchMore","networkStatus","notifyOnNetworkStatusChange","articleData","isIndex","elbil","router","queryId","query","id","elbilDetail","find","console","log","elBil","map","modell","merke","type","rekkevidde","pris","bildeURL","sitteplasser"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\nimport Navbar from \"../Components/Navbar\";\nimport CarCard from \"../Components/CarCard\";\nimport FlexWrapper from \"../Components/FlexWrapper\"\nimport styled from '@emotion/styled';\nimport { useRouter } from 'next/router'\n\nimport elbiler from '../elbiler.json';\nimport Fade from 'react-reveal/Fade';\n\nimport { useQuery } from '@apollo/react-hooks'\nimport gql from 'graphql-tag'\nimport { withApollo } from \"../lib/apollo\"\n\nconst Detail = styled.div`\nwidth: 100%;\ndisplay: flex;\nflex-direction: column;\nalign-self: center;  \n`\nconst ALL_POSTS_QUERY = gql`\n{\n    labrador {\n    article(id: 71564397) {\n      title\n      bodytextHTML\n      imageId\n    }\n  }\n}\n`\n\n ElbilDetail.getInitialProps = async ({req}) =>{\n   let url = ''\n   if (typeof window !== \"undefined\") {\n     url = window.location.href\n   } else {\n    url = req.url\n   }\n  \n   let parameter = url.split(\"=\")\n   // Getting the id from the second part of the URL\n   let elbilId = Number(parameter[1])\n   // Returning elbilId to the id from Params\n   return {elbilId};\n }\n\nfunction ElbilDetail() {\n  const { loading, error, data, fetchMore, networkStatus } = useQuery(\n    ALL_POSTS_QUERY,\n    {\n      notifyOnNetworkStatusChange: true\n    }\n  )\n  useEffect(() => {\n   \n  });\n  const articleData = JSON.stringify(data)\n\n\n\n\n  function isIndex(elbil) {\n      // Getting ID from Router\n    const router = useRouter();\n    let queryId = router.query.id\n    return elbil === queryId;\n  }\n\n  // Filtering out all the Cars that does not match the id \n  const elbilDetail = elbiler.find(function elbil() {\n    if (elbil.id === queryId) {\n      return elbil\n    } else{\n      console.log(error)\n    }\n\n  })\n \n\n  console.log(elbilDetail)\n  console.log(queryId)\n\n  // Mapping the id that remains after filtering\n  const elBil = elbilDetail.map(elbil => \n    <Fade>\n      <Detail>\n      <CarCard \n        merke={elbil.modell} \n        modell={elbil.merke}  \n        type={elbil.type}\n        rekkevidde={elbil.rekkevidde} \n        pris={elbil.pris} \n        bildeURL={elbil.bildeURL}\n        id={elbil.id}\n    />\n      <h3>Sitteplasser: {elbil.sitteplasser}</h3>\n      {articleData}\n      </Detail>\n    </Fade>\n    );\n\n    return (\n      <FlexWrapper>\n        <Navbar />\n        {elBil}\n      </FlexWrapper>\n    )\n}\n\nexport default withApollo(ElbilDetail);\n\n"]},"metadata":{},"sourceType":"module"}