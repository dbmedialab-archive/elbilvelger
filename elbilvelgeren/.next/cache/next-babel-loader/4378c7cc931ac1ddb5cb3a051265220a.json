{"ast":null,"code":"import _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nvar _jsxFileName = \"/Users/mariusgrondahl/Documents/GitHub/elbilvelger/elbilvelgeren/pages/elbil.js\";\nvar __jsx = React.createElement;\nimport React, { useEffect } from 'react';\nimport Navbar from \"../Components/Navbar\";\nimport CarCard from \"../Components/CarCard\";\nimport FlexWrapper from \"../Components/FlexWrapper\";\nimport styled from '@emotion/styled';\nimport elbiler from '../elbiler.json';\nimport Fade from 'react-reveal/Fade';\nimport { useQuery } from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\nimport { withApollo } from \"../lib/apollo\"; // Getting the same id from the router\n// const router = useRouter();\n// let queryId = router.query.id\n\nconst Detail = styled.div`\nwidth: 100%;\ndisplay: flex;\nflex-direction: column;\nalign-self: center;  \n`;\nconst ALL_POSTS_QUERY = gql`\n{\n    labrador {\n    article(id: 71564397) {\n      title\n      bodytextHTML\n      imageId\n    }\n  }\n}\n`;\n\nElbilDetail.getInitialProps = async ({\n  req\n}) => {\n  let url = '';\n\n  if (false) {\n    url = window.location.href;\n  } else {\n    url = req.url;\n  }\n\n  let parameter = url.split(\"=\"); // Getting the id from the second part of the URL\n\n  let elbilId = Number(parameter[1]); // Returning elbilId to the id from Params\n\n  const data = [...elbiler];\n  return {\n    elbilId\n  };\n};\n\nfunction ElbilDetail({\n  elbilId\n}) {\n  const {\n    loading,\n    error,\n    data,\n    fetchMore,\n    networkStatus\n  } = useQuery(ALL_POSTS_QUERY, {\n    notifyOnNetworkStatusChange: true\n  });\n  useLayoutEffect(() => {});\n  useEffect(() => {});\n\n  const articleData = _JSON$stringify(data);\n\n  let elbilcopy = [...elbiler]; // Filtering out all the Cars that does not match the id \n\n  const elbilDetail = elbilcopy.filter(elbil => elbil.id === elbilId); // Mapping the id that remains after filtering\n\n  const elBiler = elbilDetail.map(elbil => __jsx(Fade, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }, __jsx(Detail, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }, __jsx(CarCard, {\n    merke: elbil.modell,\n    modell: elbil.merke,\n    type: elbil.type,\n    rekkevidde: elbil.rekkevidde,\n    pris: elbil.pris,\n    bildeURL: elbil.bildeURL,\n    id: elbil.id,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }), __jsx(\"h3\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }, \"Sitteplasser: \", elbil.sitteplasser), articleData)));\n  return __jsx(FlexWrapper, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  }, __jsx(Navbar, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }), elBiler);\n}\n\nexport default withApollo(ElbilDetail);","map":{"version":3,"sources":["/Users/mariusgrondahl/Documents/GitHub/elbilvelger/elbilvelgeren/pages/elbil.js"],"names":["React","useEffect","Navbar","CarCard","FlexWrapper","styled","elbiler","Fade","useQuery","gql","withApollo","Detail","div","ALL_POSTS_QUERY","ElbilDetail","getInitialProps","req","url","window","location","href","parameter","split","elbilId","Number","data","loading","error","fetchMore","networkStatus","notifyOnNetworkStatusChange","useLayoutEffect","articleData","elbilcopy","elbilDetail","filter","elbil","id","elBiler","map","modell","merke","type","rekkevidde","pris","bildeURL","sitteplasser"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\nimport Navbar from \"../Components/Navbar\";\nimport CarCard from \"../Components/CarCard\";\nimport FlexWrapper from \"../Components/FlexWrapper\"\nimport styled from '@emotion/styled';\n\nimport elbiler from '../elbiler.json';\nimport Fade from 'react-reveal/Fade';\n\nimport { useQuery } from '@apollo/react-hooks'\nimport gql from 'graphql-tag'\nimport { withApollo } from \"../lib/apollo\"\n\n// Getting the same id from the router\n// const router = useRouter();\n// let queryId = router.query.id\n\nconst Detail = styled.div`\nwidth: 100%;\ndisplay: flex;\nflex-direction: column;\nalign-self: center;  \n`\nconst ALL_POSTS_QUERY = gql`\n{\n    labrador {\n    article(id: 71564397) {\n      title\n      bodytextHTML\n      imageId\n    }\n  }\n}\n`\nElbilDetail.getInitialProps = async ({req}) =>{\n  let url = ''\n  if (typeof window !== \"undefined\") {\n    url = window.location.href\n  } else {\n    url = req.url\n  }\n  \n  let parameter = url.split(\"=\")\n  // Getting the id from the second part of the URL\n  let elbilId = Number(parameter[1])\n  // Returning elbilId to the id from Params\n\n  const data = [...elbiler]\n  \n  return {elbilId};\n}\n\nfunction ElbilDetail({elbilId}) {\n  const { loading, error, data, fetchMore, networkStatus } = useQuery(\n    ALL_POSTS_QUERY,\n    {\n      notifyOnNetworkStatusChange: true\n    }\n  )\n  useLayoutEffect(() => {\n   \n  });\n\n  useEffect(( ) => {\n    \n  })\n\n\n  const articleData = JSON.stringify(data)\n  \n  let elbilcopy = [...elbiler]\n  // Filtering out all the Cars that does not match the id \n  const elbilDetail = elbilcopy.filter (elbil => elbil.id === elbilId)\n  // Mapping the id that remains after filtering\n  const elBiler = elbilDetail.map(elbil => \n\n    <Fade>\n      <Detail>\n      <CarCard \n        merke={elbil.modell} \n        modell={elbil.merke}  \n        type={elbil.type}\n        rekkevidde={elbil.rekkevidde} \n        pris={elbil.pris} \n        bildeURL={elbil.bildeURL}\n        id={elbil.id}\n    />\n      <h3>Sitteplasser: {elbil.sitteplasser}</h3>\n      {articleData}\n      </Detail>\n    </Fade>\n    );\n\n    return (\n      <FlexWrapper>\n        <Navbar />\n        {elBiler}\n      </FlexWrapper>\n    )\n}\n\nexport default withApollo(ElbilDetail);\n\n\n\n"]},"metadata":{},"sourceType":"module"}