{"ast":null,"code":"import _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _taggedTemplateLiteral from \"@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/mariusgrondahl/Documents/GitHub/elbilvelger/elbilvelgeren/pages/elbil.js\";\nvar __jsx = React.createElement;\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\nquery MyBodyText($id: Int) {\\n  labrador {\\n    article(id: $id) {\\n      title\\n      subtitle\\n      publishedURL\\n      sectionTag\\n      tags\\n      siteDomain\\n      imageId\\n      bodytextStructured {\\n        __typename\\n        ... on Labrador_HTMLElement {\\n          name\\n          attributes {\\n            key\\n            value\\n          }\\n          children {\\n            __typename\\n            ... on Labrador_HTMLElement {\\n              name\\n              attributes {\\n                key\\n                value\\n              }\\n              children {\\n                __typename\\n                ... on Labrador_HTMLElement {\\n                  name\\n                  attributes {\\n                    key\\n                    value\\n                  }\\n                  children {\\n                    __typename\\n                    ... on Labrador_HTMLElement {\\n                      name\\n                      attributes {\\n                        key\\n                        value\\n                      }\\n                      children {\\n                        __typename\\n                        ... on Labrador_HTMLElement {\\n                          name\\n                          attributes {\\n                            key\\n                            value\\n                          }\\n                          children {\\n                            __typename\\n                          }\\n                        }\\n                        ... on Labrador_Text {\\n                          text\\n                        }\\n                      }\\n                    }\\n                    ... on Labrador_Text {\\n                      text\\n                    }\\n                  }\\n                }\\n                ... on Labrador_Text {\\n                  text\\n                }\\n              }\\n            }\\n            ... on Labrador_Text {\\n              text\\n            }\\n          }\\n        }\\n      }\\n    }\\n  }\\n}\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\nwidth: 100%;\\ndisplay: flex;\\nflex-direction: column;\\nalign-self: center;  \\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useState, useEffect } from 'react';\nimport Navbar from \"../Components/Navbar\";\nimport CarCard from \"../Components/CarCard\";\nimport FlexWrapper from \"../Components/FlexWrapper\";\nimport styled from '@emotion/styled';\nimport elbiler from '../elbiler.json';\nimport Fade from 'react-reveal/Fade';\nimport { useQuery } from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\nimport { withApollo } from \"../lib/apollo\";\nvar Detail = styled.div(_templateObject());\nvar ALL_POSTS_QUERY = gql(_templateObject2());\n\nElbilDetail.getInitialProps =\n/*#__PURE__*/\nfunction () {\n  var _ref2 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(_ref) {\n    var req, query, elbilId;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            req = _ref.req, query = _ref.query;\n            elbilId = Number(query.id);\n            return _context.abrupt(\"return\", {\n              elbilId: elbilId\n            });\n\n          case 3:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nfunction ElbilDetail(_ref3) {\n  var elbilId = _ref3.elbilId;\n  // Getting article id of tester\n  var articleID = elbiler[elbilId].tester;\n  console.log(articleID);\n\n  var _useQuery = useQuery(ALL_POSTS_QUERY, {\n    notifyOnNetworkStatusChange: true,\n    variables: {\n      Id: articleID\n    }\n  }),\n      loading = _useQuery.loading,\n      error = _useQuery.error,\n      data = _useQuery.data,\n      fetchMore = _useQuery.fetchMore,\n      networkStatus = _useQuery.networkStatus; // Stopping if error\n\n\n  if (error) {\n    console.log(\"Vi har en feil\");\n    return null;\n  } // Using State Hook\n\n\n  var _useState = useState(0),\n      articleTitle = _useState[0],\n      setTitle = _useState[1];\n\n  var _useState2 = useState(1),\n      articleText = _useState2[0],\n      setText = _useState2[1];\n\n  console.log(data);\n  useEffect(function () {\n    // Update the document title using the browser API\n    if (data.labrador === undefined) {\n      setTitle(\"Vi finner ikke tittel\");\n      setText(\"Vi finner ikke br√∏dtekst\");\n    } else {\n      setTitle(_JSON$stringify(data.labrador.article.title));\n      setText(_JSON$stringify(data.labrador.article.bodytextHTML));\n    }\n  }); // Filtering out the car that matches the elbilId\n\n  var singleElbil = elbiler.filter(function (elbil) {\n    return elbil.id === elbilId;\n  });\n\n  var elBiler = __jsx(Fade, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147\n    },\n    __self: this\n  }, __jsx(Detail, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148\n    },\n    __self: this\n  }, __jsx(CarCard, {\n    merke: singleElbil[0].modell,\n    modell: singleElbil[0].merke,\n    type: singleElbil[0].type,\n    rekkevidde: singleElbil[0].rekkevidde,\n    pris: singleElbil[0].pris,\n    bildeURL: singleElbil[0].bildeURL,\n    id: singleElbil[0].id,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149\n    },\n    __self: this\n  }), __jsx(\"h3\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159\n    },\n    __self: this\n  }, \"Sitteplasser: \", singleElbil[0].sitteplasser)));\n\n  return __jsx(FlexWrapper, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166\n    },\n    __self: this\n  }, __jsx(Navbar, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167\n    },\n    __self: this\n  }), elBiler, // Cheks if data is there\n  articleTitle !== \"undefined\" ? __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171\n    },\n    __self: this\n  }, \" \", articleTitle, \" \", articleText) : __jsx(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173\n    },\n    __self: this\n  }, \" Vi har en feil\"));\n}\n\nexport default withApollo(ElbilDetail);","map":{"version":3,"sources":["/Users/mariusgrondahl/Documents/GitHub/elbilvelger/elbilvelgeren/pages/elbil.js"],"names":["React","useState","useEffect","Navbar","CarCard","FlexWrapper","styled","elbiler","Fade","useQuery","gql","withApollo","Detail","div","ALL_POSTS_QUERY","ElbilDetail","getInitialProps","req","query","elbilId","Number","id","articleID","tester","console","log","notifyOnNetworkStatusChange","variables","Id","loading","error","data","fetchMore","networkStatus","articleTitle","setTitle","articleText","setText","labrador","undefined","article","title","bodytextHTML","singleElbil","filter","elbil","elBiler","modell","merke","type","rekkevidde","pris","bildeURL","sitteplasser"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Navbar from \"../Components/Navbar\";\nimport CarCard from \"../Components/CarCard\";\nimport FlexWrapper from \"../Components/FlexWrapper\"\nimport styled from '@emotion/styled';\n\nimport elbiler from '../elbiler.json';\nimport Fade from 'react-reveal/Fade';\n\nimport { useQuery } from '@apollo/react-hooks'\nimport gql from 'graphql-tag'\nimport { withApollo } from \"../lib/apollo\"\n\nconst Detail = styled.div`\nwidth: 100%;\ndisplay: flex;\nflex-direction: column;\nalign-self: center;  \n`\n\nconst ALL_POSTS_QUERY = gql`\nquery MyBodyText($id: Int) {\n  labrador {\n    article(id: $id) {\n      title\n      subtitle\n      publishedURL\n      sectionTag\n      tags\n      siteDomain\n      imageId\n      bodytextStructured {\n        __typename\n        ... on Labrador_HTMLElement {\n          name\n          attributes {\n            key\n            value\n          }\n          children {\n            __typename\n            ... on Labrador_HTMLElement {\n              name\n              attributes {\n                key\n                value\n              }\n              children {\n                __typename\n                ... on Labrador_HTMLElement {\n                  name\n                  attributes {\n                    key\n                    value\n                  }\n                  children {\n                    __typename\n                    ... on Labrador_HTMLElement {\n                      name\n                      attributes {\n                        key\n                        value\n                      }\n                      children {\n                        __typename\n                        ... on Labrador_HTMLElement {\n                          name\n                          attributes {\n                            key\n                            value\n                          }\n                          children {\n                            __typename\n                          }\n                        }\n                        ... on Labrador_Text {\n                          text\n                        }\n                      }\n                    }\n                    ... on Labrador_Text {\n                      text\n                    }\n                  }\n                }\n                ... on Labrador_Text {\n                  text\n                }\n              }\n            }\n            ... on Labrador_Text {\n              text\n            }\n          }\n        }\n      }\n    }\n  }\n}\n`\n\nElbilDetail.getInitialProps = async ({req, query}) =>{\n  let elbilId = Number(query.id)\n  return {elbilId};\n}\n\nfunction ElbilDetail({elbilId}) {\n  // Getting article id of tester\n  const articleID = elbiler[elbilId].tester\n  console.log(articleID)\n\n  const { loading, error, data, fetchMore, networkStatus } = useQuery(\n    ALL_POSTS_QUERY,\n    {\n      notifyOnNetworkStatusChange: true,\n      variables: {Id: articleID}\n    }\n  )\n  // Stopping if error\n  if (error) {\n    console.log(\"Vi har en feil\")\n    return null\n  }\n\n  // Using State Hook\n  const [articleTitle, setTitle] = useState(0);\n  const [articleText, setText] = useState(1);\n\n  console.log(data)\n  useEffect(() => {\n    // Update the document title using the browser API\n    if (data.labrador === undefined) {\n      setTitle(\"Vi finner ikke tittel\")\n      setText(\"Vi finner ikke br√∏dtekst\")\n    } else {\n      setTitle(JSON.stringify(data.labrador.article.title))\n      setText(JSON.stringify(data.labrador.article.bodytextHTML))\n    }\n\n  });\n\n \n\n  // Filtering out the car that matches the elbilId\n  const singleElbil = elbiler.filter (elbil => elbil.id === elbilId)  \n  const elBiler =  \n    <Fade>\n      <Detail>\n      <CarCard \n        merke={singleElbil[0].modell} \n        modell={singleElbil[0].merke}  \n        type={singleElbil[0].type}\n        rekkevidde={singleElbil[0].rekkevidde} \n        pris={singleElbil[0].pris} \n        bildeURL={singleElbil[0].bildeURL}\n        id={singleElbil[0].id}\n    />\n      \n      <h3>Sitteplasser: {singleElbil[0].sitteplasser}</h3>\n    \n      </Detail>\n    </Fade>\n    \n\n    return (\n      <FlexWrapper>\n        <Navbar />\n        {elBiler}\n        { // Cheks if data is there\n        (articleTitle !== \"undefined\")\n          ? <div> {articleTitle} {articleText}</div> \n        \n          : <h1> Vi har en feil</h1> \n        }\n         \n        \n       \n      </FlexWrapper>\n    )\n}\n\nexport default withApollo(ElbilDetail);\n\n\n\n"]},"metadata":{},"sourceType":"module"}