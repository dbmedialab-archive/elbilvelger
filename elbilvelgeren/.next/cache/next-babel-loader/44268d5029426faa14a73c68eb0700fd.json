{"ast":null,"code":"import _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport _taggedTemplateLiteral from \"@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/mariusgrondahl/Documents/GitHub/elbilvelger/elbilvelgeren/pages/elbil.js\";\nvar __jsx = React.createElement;\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n{\\n    labrador {\\n    article(id: 71564397) {\\n      title\\n      bodytextHTML\\n      imageId\\n    }\\n  }\\n}\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\nwidth: 100%;\\ndisplay: flex;\\nflex-direction: column;\\nalign-self: center;  \\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useEffect } from 'react';\nimport Navbar from \"../Components/Navbar\";\nimport CarCard from \"../Components/CarCard\";\nimport FlexWrapper from \"../Components/FlexWrapper\";\nimport styled from '@emotion/styled';\nimport { useRouter } from 'next/router';\nimport elbiler from '../elbiler.json';\nimport Fade from 'react-reveal/Fade';\nimport { useQuery } from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\nimport { withApollo } from \"../lib/apollo\";\nvar Detail = styled.div(_templateObject());\nvar ALL_POSTS_QUERY = gql(_templateObject2()); // ElbilDetail.getInitialProps = async ({req}) =>{\n//   let url = ''\n//   if (typeof window !== \"undefined\") {\n//     url = window.location.href\n//   } else {\n//     url = req.url\n//   }\n//   let parameter = url.split(\"=\")\n//   // Getting the id from the second part of the URL\n//   let elbilId = Number(parameter[1])\n//   // Returning elbilId to the id from Params\n//   return {elbilId};\n// }\n\nfunction ElbilDetail() {\n  var _useQuery = useQuery(ALL_POSTS_QUERY, {\n    notifyOnNetworkStatusChange: true\n  }),\n      loading = _useQuery.loading,\n      error = _useQuery.error,\n      data = _useQuery.data,\n      fetchMore = _useQuery.fetchMore,\n      networkStatus = _useQuery.networkStatus;\n\n  useEffect(function () {});\n\n  var articleData = _JSON$stringify(data);\n\n  function isIndex(element) {\n    // Getting ID from Router\n    var router = useRouter();\n    var queryId = router.query.id;\n    return element === queryId;\n  } // Filtering out all the Cars that does not match the id \n\n\n  var elbilDetail = elbiler.find(function elbil() {\n    return elbil.id === 1;\n  });\n  console.log(elbilDetail);\n  console.log(queryId); // Mapping the id that remains after filtering\n\n  var elBil = elbilDetail.map(function (elbil) {\n    return __jsx(Fade, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, __jsx(Detail, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, __jsx(CarCard, {\n      merke: elbil.modell,\n      modell: elbil.merke,\n      type: elbil.type,\n      rekkevidde: elbil.rekkevidde,\n      pris: elbil.pris,\n      bildeURL: elbil.bildeURL,\n      id: elbil.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }), __jsx(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, \"Sitteplasser: \", elbil.sitteplasser), articleData));\n  });\n  return __jsx(FlexWrapper, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  }, __jsx(Navbar, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  }), elBil);\n}\n\nexport default withApollo(ElbilDetail);","map":{"version":3,"sources":["/Users/mariusgrondahl/Documents/GitHub/elbilvelger/elbilvelgeren/pages/elbil.js"],"names":["React","useEffect","Navbar","CarCard","FlexWrapper","styled","useRouter","elbiler","Fade","useQuery","gql","withApollo","Detail","div","ALL_POSTS_QUERY","ElbilDetail","notifyOnNetworkStatusChange","loading","error","data","fetchMore","networkStatus","articleData","isIndex","element","router","queryId","query","id","elbilDetail","find","elbil","console","log","elBil","map","modell","merke","type","rekkevidde","pris","bildeURL","sitteplasser"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,OAAP,MAAoB,uBAApB;AACA,OAAOC,WAAP,MAAwB,2BAAxB;AACA,OAAOC,MAAP,MAAmB,iBAAnB;AACA,SAASC,SAAT,QAA0B,aAA1B;AAEA,OAAOC,OAAP,MAAoB,iBAApB;AACA,OAAOC,IAAP,MAAiB,mBAAjB;AAEA,SAASC,QAAT,QAAyB,qBAAzB;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,SAASC,UAAT,QAA2B,eAA3B;AAEA,IAAMC,MAAM,GAAGP,MAAM,CAACQ,GAAV,mBAAZ;AAMA,IAAMC,eAAe,GAAGJ,GAAH,oBAArB,C,CAYA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASK,WAAT,GAAuB;AAAA,kBACsCN,QAAQ,CACjEK,eADiE,EAEjE;AACEE,IAAAA,2BAA2B,EAAE;AAD/B,GAFiE,CAD9C;AAAA,MACbC,OADa,aACbA,OADa;AAAA,MACJC,KADI,aACJA,KADI;AAAA,MACGC,IADH,aACGA,IADH;AAAA,MACSC,SADT,aACSA,SADT;AAAA,MACoBC,aADpB,aACoBA,aADpB;;AAOrBpB,EAAAA,SAAS,CAAC,YAAM,CAEf,CAFQ,CAAT;;AAGA,MAAMqB,WAAW,GAAG,gBAAeH,IAAf,CAApB;;AAKA,WAASI,OAAT,CAAiBC,OAAjB,EAA0B;AACtB;AACF,QAAMC,MAAM,GAAGnB,SAAS,EAAxB;AACA,QAAIoB,OAAO,GAAGD,MAAM,CAACE,KAAP,CAAaC,EAA3B;AACA,WAAOJ,OAAO,KAAKE,OAAnB;AACD,GApBoB,CAsBrB;;;AACA,MAAMG,WAAW,GAAGtB,OAAO,CAACuB,IAAR,CAAa,SAASC,KAAT,GAAiB;AAChD,WAAOA,KAAK,CAACH,EAAN,KAAa,CAApB;AACD,GAFmB,CAApB;AAKAI,EAAAA,OAAO,CAACC,GAAR,CAAYJ,WAAZ;AACAG,EAAAA,OAAO,CAACC,GAAR,CAAYP,OAAZ,EA7BqB,CA+BrB;;AACA,MAAMQ,KAAK,GAAGL,WAAW,CAACM,GAAZ,CAAgB,UAAAJ,KAAK;AAAA,WACjC,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACA,MAAC,OAAD;AACE,MAAA,KAAK,EAAEA,KAAK,CAACK,MADf;AAEE,MAAA,MAAM,EAAEL,KAAK,CAACM,KAFhB;AAGE,MAAA,IAAI,EAAEN,KAAK,CAACO,IAHd;AAIE,MAAA,UAAU,EAAEP,KAAK,CAACQ,UAJpB;AAKE,MAAA,IAAI,EAAER,KAAK,CAACS,IALd;AAME,MAAA,QAAQ,EAAET,KAAK,CAACU,QANlB;AAOE,MAAA,EAAE,EAAEV,KAAK,CAACH,EAPZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADA,EAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAAmBG,KAAK,CAACW,YAAzB,CAVA,EAWCpB,WAXD,CADF,CADiC;AAAA,GAArB,CAAd;AAkBE,SACE,MAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEGY,KAFH,CADF;AAMH;;AAED,eAAevB,UAAU,CAACI,WAAD,CAAzB","sourcesContent":["import React, { useEffect } from 'react';\nimport Navbar from \"../Components/Navbar\";\nimport CarCard from \"../Components/CarCard\";\nimport FlexWrapper from \"../Components/FlexWrapper\"\nimport styled from '@emotion/styled';\nimport { useRouter } from 'next/router'\n\nimport elbiler from '../elbiler.json';\nimport Fade from 'react-reveal/Fade';\n\nimport { useQuery } from '@apollo/react-hooks'\nimport gql from 'graphql-tag'\nimport { withApollo } from \"../lib/apollo\"\n\nconst Detail = styled.div`\nwidth: 100%;\ndisplay: flex;\nflex-direction: column;\nalign-self: center;  \n`\nconst ALL_POSTS_QUERY = gql`\n{\n    labrador {\n    article(id: 71564397) {\n      title\n      bodytextHTML\n      imageId\n    }\n  }\n}\n`\n\n// ElbilDetail.getInitialProps = async ({req}) =>{\n//   let url = ''\n//   if (typeof window !== \"undefined\") {\n//     url = window.location.href\n//   } else {\n//     url = req.url\n//   }\n  \n//   let parameter = url.split(\"=\")\n//   // Getting the id from the second part of the URL\n//   let elbilId = Number(parameter[1])\n//   // Returning elbilId to the id from Params\n//   return {elbilId};\n// }\n\nfunction ElbilDetail() {\n  const { loading, error, data, fetchMore, networkStatus } = useQuery(\n    ALL_POSTS_QUERY,\n    {\n      notifyOnNetworkStatusChange: true\n    }\n  )\n  useEffect(() => {\n   \n  });\n  const articleData = JSON.stringify(data)\n\n\n\n\n  function isIndex(element) {\n      // Getting ID from Router\n    const router = useRouter();\n    let queryId = router.query.id\n    return element === queryId;\n  }\n\n  // Filtering out all the Cars that does not match the id \n  const elbilDetail = elbiler.find(function elbil() {\n    return elbil.id === 1 ;\n  })\n \n\n  console.log(elbilDetail)\n  console.log(queryId)\n\n  // Mapping the id that remains after filtering\n  const elBil = elbilDetail.map(elbil => \n    <Fade>\n      <Detail>\n      <CarCard \n        merke={elbil.modell} \n        modell={elbil.merke}  \n        type={elbil.type}\n        rekkevidde={elbil.rekkevidde} \n        pris={elbil.pris} \n        bildeURL={elbil.bildeURL}\n        id={elbil.id}\n    />\n      <h3>Sitteplasser: {elbil.sitteplasser}</h3>\n      {articleData}\n      </Detail>\n    </Fade>\n    );\n\n    return (\n      <FlexWrapper>\n        <Navbar />\n        {elBil}\n      </FlexWrapper>\n    )\n}\n\nexport default withApollo(ElbilDetail);\n\n"]},"metadata":{},"sourceType":"module"}